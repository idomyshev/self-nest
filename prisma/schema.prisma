generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  id        String     @id @default(uuid()) @db.Uuid
  name      String     @unique @db.VarChar(255)
  updatedAt DateTime?  @db.Timestamptz(6)
  userId    String     @db.Uuid
  archived  Boolean?
  user      User       @relation(fields: [userId], references: [id])
  timeSlots TimeSlot[]
}

model File {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid
  description String    @unique @db.VarChar(255)
  encrypted   Boolean?
  parseJson   Boolean?
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @db.Timestamptz(6)
  User        User      @relation(fields: [userId], references: [id])
}

model NotificationToken {
  id             String       @id @default(uuid()) @db.Uuid
  telegramBotId  String       @db.Uuid
  telegramUserId String       @db.Uuid
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?    @db.Timestamptz(6)
  telegramBot    TelegramBot  @relation(fields: [telegramBotId], references: [id])
  telegramUser   TelegramUser @relation(fields: [telegramUserId], references: [id])
}

model Tag {
  createdAt DateTime      @default(now()) @db.Timestamptz(6)
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @unique @db.VarChar(255)
  updatedAt DateTime?     @db.Timestamptz(6)
  userId    String        @db.Uuid
  user      User          @relation(fields: [userId], references: [id])
  words     TagsOnWords[]
}

model TimeSlot {
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  id        String    @id @default(uuid()) @db.Uuid
  updatedAt DateTime? @db.Timestamptz(6)
  userId    String    @db.Uuid
  comment   String?   @db.VarChar(500)
  archived  Boolean?
  time      String    @db.VarChar(8)
  clientId  String?   @db.Uuid
  date      Int?
  client    Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
}

model TagsOnWords {
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  tagId     String   @db.Uuid
  userId    String   @db.Uuid
  wordId    String   @db.Uuid
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  word      Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@id([wordId, tagId])
}

model TelegramBot {
  id                 String              @id @default(uuid()) @db.Uuid
  token              String              @unique @db.VarChar(46)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime?           @db.Timestamptz(6)
  botName            String              @unique @db.VarChar(50)
  notificationTokens NotificationToken[]
}

model TelegramUser {
  id                 String              @id @default(uuid()) @db.Uuid
  telegramUserId     String              @unique @db.VarChar(12)
  fullName           String              @unique @db.VarChar(50)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime?           @db.Timestamptz(6)
  notificationTokens NotificationToken[]
}

model Translation {
  id        String    @id @default(uuid()) @db.Uuid
  text      String    @db.VarChar(1000)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @db.Timestamptz(6)
  wordId    String    @db.Uuid
  userId    String    @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  word      Word      @relation(fields: [wordId], references: [id])
}

model User {
  id             String        @id @default(uuid()) @db.Uuid
  username       String        @unique @db.VarChar(255)
  email          String        @unique @db.VarChar(255)
  firstName      String        @db.VarChar(255)
  lastName       String        @db.VarChar(255)
  hash           String        @db.VarChar(60)
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?     @db.Timestamptz(6)
  config         Json?
  authCode       String?       @db.VarChar(4)
  authCodeTime   DateTime?     @db.Timestamptz(6)
  telegramUserId String?       @unique @db.VarChar(255)
  active         Boolean?
  regCode        String?       @db.VarChar(6)
  regCodeTime    DateTime?     @db.Timestamptz(6)
  rpCode         String?       @db.Uuid
  rpCodeTime     DateTime?     @db.Timestamptz(6)
  clients        Client[]
  files          File[]
  tags           Tag[]
  tagsOnWords    TagsOnWords[]
  timeSlots      TimeSlot[]
  translations   Translation[]
  words          Word[]
}

model Word {
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  id           String        @id @default(uuid()) @db.Uuid
  title        String        @unique @db.VarChar(255)
  updatedAt    DateTime?     @db.Timestamptz(6)
  userId       String        @db.Uuid
  tags         TagsOnWords[]
  translations Translation[]
  user         User          @relation(fields: [userId], references: [id])
}
